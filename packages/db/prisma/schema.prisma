// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  passwordHash String
  fullName     String?
  createdAt    DateTime @default(now())
  roles        UserRole[]
  bookings     Booking[]
}

model Role {
  id    Int        @id @default(autoincrement())
  name  String     @unique
  users UserRole[]
}

model UserRole {
  userId String
  roleId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role   Role @relation(fields: [roleId], references: [id], onDelete: Cascade)
  @@id([userId, roleId])
}

model Event {
  id        String   @id @default(uuid())
  name      String
  city      String?
  startsAt  DateTime?         // thời điểm “chính” (ví dụ suất đầu tiên)
  createdAt DateTime  @default(now())
  shows     Show[]

  @@index([startsAt])
}

model Show {
  id         String   @id @default(uuid())
  eventId    String
  startsAt   DateTime            // giờ diễn (UTC)
  venue      String?             // địa điểm
  seatMapId  String?
  status     ShowStatus @default(scheduled)  // optional

  event      Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  bookings   Booking[]
  tickets    Ticket[]

  @@index([eventId])
  @@index([startsAt])
}

enum ShowStatus {
  scheduled
  cancelled
}


model Booking {
  id        String   @id @default(uuid())
  userId    String
  showId    String
  status    BookingStatus @default(pending)
  createdAt DateTime @default(now())
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  show      Show   @relation(fields: [showId], references: [id], onDelete: Cascade)
}

enum BookingStatus {
  approved
  pending
  cancelled
}

model Ticket {
  id      String @id @default(uuid())
  showId  String
  seatId  String
  orderId String?
  show    Show   @relation(fields: [showId], references: [id], onDelete: Cascade)

  @@unique([showId, seatId]) // chống double-book
}
